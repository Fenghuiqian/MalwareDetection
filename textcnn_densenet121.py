#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import h5py
import numpy as np
import pandas as pd
from keras.models import Model
from keras.layers import Input, Activation, Dense, Flatten, Dropout, Embedding
from keras.layers import Conv1D, MaxPooling1D, AveragePooling1D, ZeroPadding1D, GlobalAveragePooling1D
from keras.layers.merge import concatenate
from keras.layers.normalization import BatchNormalization
from keras.callbacks import EarlyStopping, ModelCheckpoint
from sklearn.model_selection import StratifiedKFold


def DenseNet121(nb_dense_block=3,
                growth_rate=16,
                nb_filter=32,
                nb_layers=[6, 12, 16],
                reduction=0.5, dropout_rate=0.1,
                weight_decay=1e-4, classes=8, weights_path=None):
    eps = 1.1e-5
    concat_axis = 2
    # compute compression factor
    compression = 1.0 - reduction

    img_input = Input(shape=(20000,), name='data')

    embed = Embedding(301, 64, input_length=20000, mask_zero=False)(img_input)
    # Initial convolution
    x1 = ZeroPadding1D(3, name='conv1_zeropadding_1')(embed)
    x1 = Conv1D(nb_filter, 7, name='conv1_x1', use_bias=False)(x1)
    x1 = BatchNormalization(epsilon=eps, axis=concat_axis, name='conv1_bn_1', scale=True)(x1)
    x1 = Activation('relu', name='relu1_1')(x1)
    x1 = ZeroPadding1D(1, name='pool1_zeropadding_1')(x1)
    x1 = MaxPooling1D(3, strides=2, name='pool1_1')(x1)

    x2 = ZeroPadding1D(2, name='conv1_zeropadding_2')(embed)
    x2 = Conv1D(nb_filter, 5, name='conv1_x2', use_bias=False)(x2)
    x2 = BatchNormalization(epsilon=eps, axis=concat_axis, name='conv1_bn_2', scale=True)(x2)
    x2 = Activation('relu', name='relu1_2')(x2)
    x2 = ZeroPadding1D(1, name='pool1_zeropadding_2')(x2)
    x2 = MaxPooling1D(3, strides=2, name='pool1_2')(x2)

    x3 = ZeroPadding1D(1, name='conv1_zeropadding_3')(embed)
    x3 = Conv1D(nb_filter, 3, name='conv1_x3', use_bias=False)(x3)
    x3 = BatchNormalization(epsilon=eps, axis=concat_axis, name='conv1_bn_3', scale=True)(x3)
    x3 = Activation('relu', name='relu1_3')(x3)
    x3 = ZeroPadding1D(1, name='pool1_zeropadding_3')(x3)
    x3 = MaxPooling1D(3, strides=2, name='pool1_3')(x3)

    x4 = ZeroPadding1D(4, name='conv1_zeropadding_4')(embed)
    x4 = Conv1D(nb_filter, 9, name='conv1_x4', use_bias=False)(x4)
    x4 = BatchNormalization(epsilon=eps, axis=concat_axis, name='conv1_bn_4', scale=True)(x4)
    x4 = Activation('relu', name='relu1_4')(x4)
    x4 = ZeroPadding1D(1, name='pool1_zeropadding_4')(x4)
    x4 = MaxPooling1D(3, strides=2, name='pool1_4')(x4)

    x5 = Conv1D(nb_filter, 1, name='conv1_x5', use_bias=False)(embed)
    x5 = BatchNormalization(epsilon=eps, axis=concat_axis, name='conv1_bn_5', scale=True)(x5)
    x5 = Activation('relu', name='relu1_5')(x5)
    x5 = ZeroPadding1D(1, name='pool1_zeropadding_5')(x5)
    x5 = MaxPooling1D(3, strides=2, name='pool1_5')(x5)

    x = concatenate([x1, x2, x3, x4, x5])

    # Add dense blocks
    for block_idx in range(nb_dense_block - 1):
        stage = block_idx + 2
        x, nb_filter = dense_block(x, stage, nb_layers[block_idx], nb_filter, growth_rate, dropout_rate=dropout_rate,
                                   weight_decay=weight_decay)

        # Add transition_block
        x = transition_block(x, stage, nb_filter, compression=compression, dropout_rate=dropout_rate,
                             weight_decay=weight_decay)
        nb_filter = int(nb_filter * compression)

    final_stage = stage + 1
    x, nb_filter = dense_block(x, final_stage, nb_layers[-1], nb_filter, growth_rate, dropout_rate=dropout_rate,
                               weight_decay=weight_decay)

    x = BatchNormalization(epsilon=eps, axis=concat_axis, name='conv' + str(final_stage) + '_blk_bn', scale=True)(x)
    x = Activation('relu', name='relu' + str(final_stage) + '_blk')(x)
    x = GlobalAveragePooling1D(name='pool' + str(final_stage))(x)

    x = Dense(classes, name='fc6')(x)
    x = Activation('softmax', name='prob')(x)

    model = Model(img_input, x, name='densenet')

    if weights_path is not None:
        model.load_weights(weights_path)
    return model


def conv_block(x, stage, branch, nb_filter, dropout_rate=None, weight_decay=1e-4):
    '''Apply BatchNorm, Relu, bottleneck 1x1 Conv2D, 3x3 Conv2D, and option dropout
        # Arguments
            x: input tensor
            stage: index for dense block
            branch: layer index within each dense block
            nb_filter: number of filters
            dropout_rate: dropout rate
            weight_decay: weight decay factor
    '''
    eps = 1.1e-5
    concat_axis = 2
    conv_name_base = 'conv' + str(stage) + '_' + str(branch)
    relu_name_base = 'relu' + str(stage) + '_' + str(branch)

    # 1x1 Convolution (Bottleneck layer)
    inter_channel = nb_filter * 4
    x = BatchNormalization(epsilon=eps, axis=concat_axis, name=conv_name_base + '_x1_bn', scale=True)(x)
    #     x = Scale(axis=concat_axis, name=conv_name_base+'_x1_scale')(x)
    x = Activation('relu', name=relu_name_base + '_x1')(x)
    x = Conv1D(inter_channel, 1, name=conv_name_base + '_x1', use_bias=False)(x)

    if dropout_rate:
        x = Dropout(dropout_rate)(x)

    # 3x3 Convolution
    x = BatchNormalization(epsilon=eps, axis=concat_axis, name=conv_name_base + '_x2_bn', scale=True)(x)
    x = Activation('relu', name=relu_name_base + '_x2')(x)
    x = ZeroPadding1D(1, name=conv_name_base + '_x2_zeropadding')(x)
    x = Conv1D(nb_filter, 3, name=conv_name_base + '_x2', use_bias=False)(x)

    if dropout_rate:
        x = Dropout(dropout_rate)(x)

    return x


def transition_block(x, stage, nb_filter, compression=1.0, dropout_rate=None, weight_decay=1E-4):
    ''' Apply BatchNorm, 1x1 Convolution, averagePooling, optional compression, dropout
        # Arguments
            x: input tensor
            stage: index for dense block
            nb_filter: number of filters
            compression: calculated as 1 - reduction. Reduces the number of feature maps in the transition block.
            dropout_rate: dropout rate
            weight_decay: weight decay factor
    '''

    eps = 1.1e-5
    conv_name_base = 'conv' + str(stage) + '_blk'
    relu_name_base = 'relu' + str(stage) + '_blk'
    pool_name_base = 'pool' + str(stage)

    x = BatchNormalization(epsilon=eps, axis=concat_axis, name=conv_name_base + '_bn', scale=True)(x)
    x = Activation('relu', name=relu_name_base)(x)
    x = Conv1D(int(nb_filter * compression), 1, name=conv_name_base, use_bias=False)(x)

    if dropout_rate:
        x = Dropout(dropout_rate)(x)

    x = AveragePooling1D(2, strides=2, name=pool_name_base)(x)

    return x


def dense_block(x, stage, nb_layers, nb_filter, growth_rate, dropout_rate=None, weight_decay=1e-4,
                grow_nb_filters=True):
    ''' Build a dense_block where the output of each conv_block is fed to subsequent ones
        # Arguments
            x: input tensor
            stage: index for dense block
            nb_layers: the number of layers of conv_block to append to the model.
            nb_filter: number of filters
            growth_rate: growth rate
            dropout_rate: dropout rate
            weight_decay: weight decay factor
            grow_nb_filters: flag to decide to allow number of filters to grow
    '''

    eps = 1.1e-5
    concat_feat = x

    for i in range(nb_layers):
        branch = i + 1
        x = conv_block(concat_feat, stage, branch, growth_rate, dropout_rate, weight_decay)
        concat_feat = concatenate([concat_feat, x], name='concat_' + str(stage) + '_' + str(branch))

        if grow_nb_filters:
            nb_filter += growth_rate

    return concat_feat, nb_filter


if __name__ == "__name__":
    
    # Load feature data
    file = h5py.File("malware_seq_20000.h5", "r+")
    print(list(file.keys()))
    pad_seq_train = np.array(file["seq_train_20000"])
    pad_seq_test = np.array(file["seq_test_20000"])
    train_label = np.array(file["label"])

    # class weight
    cls_wt = pd.Series(train_label).value_counts()
    cls_wt = cls_wt.sum() / cls_wt

    # skf5 model fit
    skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)
    result_val = np.zeros(shape=(len(pad_seq_train), 8))
    result_test = np.zeros(shape=(len(pad_seq_test), 8))

    for i, (tr_index, val_index) in enumerate(skf.split(pad_seq_train, train_label)):
        tr_X, val_X = pad_seq_train[[tr_index]], pad_seq_train[[val_index]]
        tr_y, val_y = train_label[[tr_index]], train_label[[val_index]]
        tr_y = pd.get_dummies(tr_y).values
        val_y = pd.get_dummies(val_y).values
        model = DenseNet121()
        model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
        model_weight_name = "Model_DENSENET121_2w_weight_%s.pkl" % i
        early_stopping = EarlyStopping(monitor='val_loss', patience=10)
        checkpoint = ModelCheckpoint(model_weight_name, save_best_only=True, save_weights_only=True)
        # tensorBoard = keras.callbacks.TensorBoard(log_dir="./TXTCNN/Graph", histogram_freq=1, write_graph=True, write_images=True)

        model.fit(tr_X, tr_y,
                  validation_data=(val_X, val_y),
                  epochs=100, batch_size=4,
                  shuffle=True,
                  class_weight=cls_wt,
                  callbacks=[early_stopping, checkpoint])
        model.load_weights(model_weight_name)
        pred_val_X = model.predict(val_X, batch_size=64, verbose=1)
        pred_test = model.predict(pad_seq_test, batch_size=64, verbose=1)
        result_val[[val_index]] = pred_val_X
        result_test += pred_test
    result_test /= 5

    # save results
    pd.DataFrame(result_val).to_csv("cnn_densenet121_train_5f.csv")
    pd.DataFrame(result_test).to_csv("cnn_densenet121_test_5average.csv")

