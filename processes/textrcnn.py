#!/usr/bin/env python3
# coding: utf-8

import numpy as np
import pandas as pd
import h5py
from keras.models import Model
from keras.layers import Input, Activation, Dense, Flatten, Dropout, Embedding
from keras.layers import Conv1D, MaxPooling1D, AveragePooling1D, ZeroPadding1D,CuDNNLSTM, Bidirectional, CuDNNGRU
from keras.layers.merge import concatenate
from keras.layers.normalization import BatchNormalization
from keras.callbacks import EarlyStopping, ModelCheckpoint
from sklearn.model_selection import StratifiedKFold
from KMaxPooling import KMaxPooling1D


def rcnn(maxlen=7000):
    inputs = Input(shape=(maxlen,), dtype='float64')
    embed = Embedding(304, 256, input_length=maxlen)(inputs)
    # lstm
    lstm = Bidirectional(CuDNNGRU(128, return_sequences=True))(embed)
    conc = concatenate([lstm, embed])
    # KMaxPooling
    x = KMaxPooling1D(k=3)(conc)
    #fc = Dense(128, activation='relu')(x)
    outputs = Dense(8, activation='softmax')(x)
    model = Model(inputs=inputs, outputs=outputs)
    return model


if __name__ == '__main__':
    #load sequences data
    file = h5py.File("data/malware_seq_data_7000.h5", "r+")
    pad_seq_train = np.array(file["pad_seq_train"]) 
    pad_seq_test = np.array(file["pad_seq_test"]) 
    train_label = np.array(file["train_label"])

    cls_wt = pd.Series(train_label).value_counts()
    cls_wt = cls_wt.sum()/cls_wt
    skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)
    result_val = np.zeros(shape=(len(pad_seq_train), 8))
    result_test = np.zeros(shape=(len(pad_seq_test), 8))
    for i, (tr_index, val_index) in enumerate(skf.split(pad_seq_train, train_label)):
        tr_X, val_X = pad_seq_train[[tr_index]], pad_seq_train[[val_index]]
        tr_y, val_y = train_label[[tr_index]], train_label[[val_index]]
        tr_y = pd.get_dummies(tr_y).values
        val_y = pd.get_dummies(val_y).values
        model = rcnn()
        model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
        model_weight_name = "data/weights/Model_rcnn_7k_weight_%s.pkl" % i
        early_stopping =EarlyStopping(monitor='val_loss', patience=10)
        checkpoint = ModelCheckpoint(model_weight_name, save_best_only=True, save_weights_only=True)
        #tensorBoard = keras.callbacks.TensorBoard(log_dir="./data/TXTCNN/Graph", histogram_freq=1, write_graph=True, write_images=True)

        model.fit(tr_X, tr_y,
                  validation_data=(val_X, val_y),
                  epochs=100, batch_size=16,
                  shuffle=True,
                  #class_weight = cls_wt,
                  callbacks=[early_stopping, checkpoint]
                 )
        model.load_weights(model_weight_name)
        pred_val_X = model.predict(val_X, batch_size=64, verbose=1)
        pred_test = model.predict(pad_seq_test, batch_size=64, verbose=1)
        result_val[[val_index]] = pred_val_X
        result_test += pred_test
    result_test /= 5

    # save result
    pd.DataFrame(result_val).to_csv("data/results/rcnn_train_5f.csv")
    pd.DataFrame(result_test).to_csv("data/results/rcnn_test_5average.csv")
