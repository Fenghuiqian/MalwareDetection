#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import numpy as np
import pandas as pd
from sklearn.preprocessing import LabelEncoder
import h5py
import os
os.environ['KERAS_BACKEND'] = 'theano'
from keras.preprocessing.sequence import pad_sequences

maxlen = 2000


def load_data(file_train, file_test):
    path = "./data/"
    train = pd.read_csv(path + file_train,
                        dtype={'label': np.uint8, 'file_id': np.uint32, 'tid': np.uint16, 'index': np.uint16, 'api': str})
    test = pd.read_csv(path + file_test,
                       dtype={'label': np.uint8, 'file_id': np.uint32, 'tid': np.uint16, 'index': np.uint16, 'api': str})
    return train, test


def encoder(train, test):
    unique_api = list(set(list(train["api"].unique()) + list(test["api"].unique())))
    # print(len(unique_api))
    enc = LabelEncoder()
    enc.fit(unique_api)
    train["api"] = enc.transform(train["api"])
    test["api"] = enc.transform(test["api"])
    return train, test


def make_sequence(train, test, maxlen):
    api_seq_train = train.groupby(["file_id"]).agg({"api": {"api_seq": lambda x: [i for i in x], "seq_len": "count"}})
    api_seq_test = test.groupby(["file_id"]).agg({"api": {"api_seq": lambda x: [i for i in x], "seq_len": "count"}})
    train_label = train.groupby(["file_id"])["label"].agg("first").values

    # print(api_seq_train.api.seq_len.max(), api_seq_train.api.seq_len.min(), api_seq_train.api.seq_len.mean())
    api_seq_train_data = api_seq_train.api.api_seq.values
    api_seq_test_data = api_seq_test.api.api_seq.values

    pad_seq_train = pad_sequences(api_seq_train_data, maxlen=maxlen)
    pad_seq_test = pad_sequences(api_seq_test_data, maxlen=maxlen)

    return train_label, pad_seq_train, pad_seq_test


def main():
    train, test = load_data('../data/security_train.csv', '../data/security_test.csv')
    train, test = encoder(train, test)
    train_label, pad_seq_train, pad_seq_test = make_sequence(train, test, maxlen=maxlen)

    # save feature
    file = h5py.File("./data/malware_seq_%s.h5" % maxlen, "w")
    file["label"] = train_label
    file["seq_train_%s" % maxlen] = pad_seq_train
    file["seq_test_%s" % maxlen] = pad_seq_test
    file.close()


if __name__ == '__main__':
    main()


